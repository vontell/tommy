function createAudioMeter(audioContext,clipLevel,averaging,clipLag){var processor=audioContext.createScriptProcessor(512);processor.onaudioprocess=volumeAudioProcess;processor.clipping=false;processor.lastClip=0;processor.volume=0;processor.clipLevel=clipLevel||0.98;processor.averaging=averaging||0.95;processor.clipLag=clipLag||750;processor.connect(audioContext.destination);processor.checkClipping=function(){if(!this.clipping)
return false;if((this.lastClip+this.clipLag)<window.performance.now())
this.clipping=false;return this.clipping;};processor.shutdown=function(){this.disconnect();this.onaudioprocess=null;};return processor;}
function volumeAudioProcess(event){var buf=event.inputBuffer.getChannelData(0);var bufLength=buf.length;var sum=0;var x;for(var i=0;i<bufLength;i++){x=buf[i];if(Math.abs(x)>=this.clipLevel){this.clipping=true;this.lastClip=window.performance.now();}
sum+=x*x;}
var rms=Math.sqrt(sum / bufLength);this.volume=Math.max(rms,this.volume*this.averaging);};(function(){'use strict'
var tommy
function Tommy(id,config,settings){if(typeof this==='undefined'||Object.getPrototypeOf(this)!==Tommy.prototype){return new Tommy(id,config,settings)}
tommy=this
tommy.version='0.0.1-alpha'
tommy.context={payload:null,previous:null,timeSpent:null}
tommy.current={suggestions:[],payload:null}
tommy.listening=false
tommy.config=config||[]
tommy.settings=settings||{}
_addStylesheets()
_fillInDefaultSettings()
_processConfiguration()
_buildSpeechRecognition()
if(!tommy.isSpeechSupported()){console.log("Tommy disabled - not available in this browser")
return}
tommy.container=document.getElementById(id);if(tommy.container==null){console.error("Given id for Tommy object <tommy-container> not found - given id was '"+JSON.stringify(id)+"'")
return}
_positionTommy()
_buildTommyHTML()
_buildVolumeListener()
_reapplySettings()
d("Tommy setup finished")}
Tommy.prototype.isSpeechSupported=function(){return tommy.speechService!=null}
Tommy.prototype.open=function(){}
Tommy.prototype.listen=function(timeLimit){d("Starting listening process")
if(tommy.settings.preClick){tommy.settings.preClick()}
tommy.fabButton.classList.add("opened-button")
tommy.fabButton.onclick=tommy.deafen
tommy.fabIcon.innerHTML="&#xE029;"
tommy.listening=true
tommy.speechService.start()}
Tommy.prototype.deafen=function(timeDelay){tommy.fabButton.onclick=tommy.listen
d("Stopping listening process")
tommy.speechService.stop()
tommy.listening=false}
Tommy.prototype.close=function(){tommy.fabIcon.innerHTML="&#xE39F;"
tommy.spokenPreview.innerHTML=""
tommy.resultPanel.style.height="0px"
tommy.resultPanel.style.visibility="hidden"
tommy.resultPanelSuggestions.innerHTML=""
setTimeout(function(){tommy.fabButton.classList.remove("opened-button")},300)}
function _isMobile(){return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)}
function _fillInDefaultSettings(){var s=tommy.settings
var e=function(key){return!("undefined"===typeof(tommy.settings[key]))}
var newSettings={buttonColor:e("buttonColor")?s.buttonColor:"#3F51B5",iconColor:e("iconColor")?s.iconColor:"#FFFFFF",iconRecordingColor:e("iconRecordingColor")?s.iconRecordingColor:"#F44336",visualizerColor:e("visualizerColor")?s.visualizerColor:"#7986CB",panelTitle:e("panelTitle")?s.panelTitle:"Welcome to Tommy",font:e("font")?s.font:"Open Sans",debug:e("debug")?s.debug:false,disabled:e("disabled")?s.disabled:false,hidden:e("hidden")?s.hidden:false,preClick:e("preClick")?s.preClick:undefined,fullscreen:e("fullscreen")?s.fullscreen:false,fullscreenIfMobile:e("fullscreenIfMobile")?s.fullscreenIfMobile:true,emptyText:e("emptyText")?s.emptyText:undefined,emptyHTML:e("emptyHTML")?s.emptyHTML:undefined,speechEnabled:e("speechEnabled")?s.speechEnabled:true,textEnabled:e("textEnabled")?s.textEnabled:true,position:e("position")?s.position:"bottom end",preview:e("preview")?s.preview:"Say what you are looking for",previewFunction:e("previewFunction")?s.previewFunction:undefined,feelingLucky:e("feelingLucky")?s.feelingLucky:false,algorithm:e("algorithm")?s.algorithm:"inclusive_one",tail:e("tail")?s.tail:[]}
tommy.settings=newSettings}
function _processConfiguration(){_validateConfiguration()
_algoAlpha(true,true)}
function _validateConfiguration(){var errorOccurred=false
var checker=function(def,index,from){var error=null
if(!(def.title||def.titleFunction)){error="a title or titleFunction must be provided."}else if(!(typeof def.titleFunction==="function"||def.titleFunction==undefined)){error="titleFunction must be a function or undefined."}else if(!(typeof def.descriptionFunction==="function"||def.descriptionFunction==undefined)){error="iconFunction must be a function or undefined."}else if(!(typeof def.iconFunction==="function"||def.iconFunction==undefined)){error="iconFunction must be a function or undefined."}else if(!(typeof def.displayHTML==="function"||def.displayHTML==undefined)){error="displayHTML must be a function or undefined."}
if(error){console.error(new TypeError("Error within "+from+" at index "+index+", "+error))
errorOccurred=true}}
for(var i=0;i<tommy.config.length;i++){checker(tommy.config[i],i,"config")}
for(var i=0;i<tommy.settings.tail.length;i++){checker(tommy.settings.tail[i],i,"settings.tail")}
if(errorOccurred){console.error("An error has occurred in your configuration; Tommy will continue to run, but unexpected behavior may occur!")}}
function _algoAlpha(useTitle,useDescription){tommy.internalDefinitionMapping={}
for(var i=0;i<tommy.config.length;i++){var def=tommy.config[i]
var keywords=def.keywords.split(" ")
if(useTitle&&def.title)keywords=keywords.concat(def.title.split(" "))
if(useDescription&&def.description)keywords=keywords.concat(def.description.split(" "))
keywords=Array.from(new Set(keywords))
for(var j=0;j<keywords.length;j++){var keyword=keywords[j].toLowerCase()
if(!tommy.internalDefinitionMapping[keyword])tommy.internalDefinitionMapping[keyword]=[]
tommy.internalDefinitionMapping[keyword].push(i)}}
d("Definition configuration finished")
d(tommy.internalDefinitionMapping)}
function _buildSpeechRecognition(){tommy.speechService=new(window.SpeechRecognition||window.webkitSpeechRecognition||window.mozSpeechRecognition||window.msSpeechRecognition)()
if(tommy.speechService){tommy.speechService.lang='en-US'
tommy.speechService.interimResults=true
tommy.speechService.maxAlternatives=0}
tommy.speechService.onaudiostart=function(event){tommy.spokenPreview.style.fontStyle="italic"
var preview="Say what you are looking for"
if(tommy.settings.previewFunction){preview=tommy.settings.previewFunction()}else if(!(tommy.settings.preview===undefined)){preview=tommy.settings.preview}
tommy.spokenPreview.innerHTML=preview
tommy.fabIcon.style.color=tommy.settings.iconRecordingColor}
tommy.speechService.onaudioend=function(event){tommy.fabIcon.style.color=tommy.settings.iconColor
if(tommy.settings.feelingLucky&&tommy.current.suggestions[0]){_moveToSuggestion(tommy.current.suggestions[0])}}
tommy.speechService.onresult=function(event){tommy.spokenPreview.style.fontStyle="normal"
tommy.spokenPreview.innerHTML=event.results[0][0].transcript
tommy.current.payload=event.results[0][0].transcript
_processPayload()}
tommy.speechService.onend=function(event){tommy.deafen()}
tommy.speechService.onnomatch=function(event){_displayNoResults();}
tommy.speechService.onerror=function(event){_displayNoResults();}}
function _buildVolumeListener(){window.AudioContext=window.AudioContext||window.webkitAudioContext
tommy.audioContext=new AudioContext()
try{navigator.getUserMedia=navigator.getUserMedia||navigator.webkitGetUserMedia||navigator.mozGetUserMedia
navigator.getUserMedia({"audio":{"mandatory":{"googEchoCancellation":"false","googAutoGainControl":"false","googNoiseSuppression":"false","googHighpassFilter":"false"},"optional":[]},},_gotStream,_didntGetStream)}catch(err){e("Audio volume not available")}}
function _didntGetStream(){e("Audio volume not available")}
function _gotStream(stream){d("Audio volume available")
tommy.mediaStreamSource=tommy.audioContext.createMediaStreamSource(stream);tommy.meter=createAudioMeter(tommy.audioContext);tommy.mediaStreamSource.connect(tommy.meter);_drawAudioVisualizer();}
function _drawAudioVisualizer(){var ctx=tommy.visualizer.getContext("2d")
ctx.clearRect(0,0,tommy.visualizer.width,tommy.visualizer.height);if(tommy.listening){ctx.fillStyle=tommy.settings.visualizerColor;ctx.beginPath();var volume=tommy.meter.volume<0.01?0:tommy.meter.volume
var distance=Math.min(volume/0.002,23)
ctx.arc(25,25,distance,0,2*Math.PI);ctx.fill();}
tommy.rafID=window.requestAnimationFrame(_drawAudioVisualizer);}
function _addStylesheets(){var stylesheets=['https://fonts.googleapis.com/icon?family=Material+Icons','https://fonts.googleapis.com/css?family=Open+Sans','https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.5.2/animate.min.css']
var head=document.getElementsByTagName('head')[0]
for(var i=0;i<stylesheets.length;i++){var style=stylesheets[i]
var link=document.createElement('link')
link.rel='stylesheet'
link.type='text/css'
link.href=style
link.media='all'
head.appendChild(link)}}
function _positionTommy(){tommy.container.style.position='fixed'
tommy.container.style.bottom='0'
tommy.container.style.right='0'
tommy.container.style.marginBottom='16px'
tommy.container.style.marginRight='16px'}
function _buildTommyHTML(){var container=document.createElement("div")
container.id="tommy-internal-container"
tommy.internalContainer=container
tommy.container.appendChild(container)
tommy.fabButton=document.createElement("div")
tommy.fabIcon=document.createElement("i")
tommy.visualizer=document.createElement('canvas')
tommy.fabIcon.className="material-icons noselect"
tommy.fabIcon.innerHTML='&#xE39F;'
tommy.fabButton.id="tommy-main-button"
tommy.fabIcon.id="tommy-main-button-icon"
tommy.visualizer.id="tommy-main-button-visualizer"
tommy.visualizer.width=50
tommy.visualizer.height=50
container.appendChild(tommy.fabButton)
tommy.fabButton.appendChild(tommy.visualizer)
tommy.fabButton.appendChild(tommy.fabIcon)
tommy.fabTooltip=document.createElement("span")
tommy.fabTooltip.id="fab-tooltip"
tommy.fabTooltip.classList.add("tooltiptext")
tommy.fabTooltip.classList.add("noselect")
tommy.fabButton.appendChild(tommy.fabTooltip)
tommy.spokenPreview=document.createElement("span")
tommy.spokenPreview.id="tommy-button-spoken-preview"
tommy.fabButton.appendChild(tommy.spokenPreview)
tommy.resultPanel=document.createElement("div")
tommy.resultPanel.id="result-panel"
tommy.resultPanel.style.height="0px"
tommy.resultPanel.style.visibility="hidden"
tommy.resultPanelTop=document.createElement("div")
tommy.resultPanelTop.id="result-panel-top"
tommy.resultPanelTopTitle=document.createElement("span")
tommy.resultPanelTopTitle.id="result-panel-top-title"
tommy.resultPanelCloseIcon=document.createElement("i")
tommy.resultPanelCloseIcon.className="material-icons noselect"
tommy.resultPanelCloseIcon.innerHTML='&#xE5CD;'
tommy.resultPanelCloseIcon.id="result-panel-close-icon"
tommy.resultPanelCloseIcon.onclick=tommy.close
tommy.resultPanelTop.appendChild(tommy.resultPanelTopTitle)
tommy.resultPanelTop.appendChild(tommy.resultPanelCloseIcon)
tommy.resultPanel.appendChild(tommy.resultPanelTop)
tommy.resultPanelSuggestions=document.createElement("div")
tommy.resultPanelSuggestions.id="result-panel-suggestions"
tommy.resultPanel.appendChild(tommy.resultPanelSuggestions)
container.appendChild(tommy.resultPanel)}
function _reapplySettings(){tommy.fabButton.style.background=tommy.settings.buttonColor
if(!tommy.listening)tommy.fabIcon.style.color=tommy.settings.iconColor
if(tommy.listening)tommy.fabIcon.style.color=tommy.settings.iconRecordingColor
tommy.resultPanelTopTitle.innerHTML=tommy.settings.panelTitle
tommy.container.style.fontFamily=tommy.settings.font
if(tommy.settings.disabled){tommy.fabButton.classList.add("tooltip")
tommy.fabButton.style.cursor="default"
tommy.fabTooltip.innerHTML="Tommy is disabled"
tommy.fabButton.onclick=function(){}}else{tommy.fabButton.classList.remove("tooltip")
tommy.fabButton.style.cursor="pointer"
tommy.fabTooltip.innerHTML=""
tommy.fabButton.onclick=tommy.listen;}
if(tommy.settings.hidden){tommy.container.style.display="none"}else{tommy.container.style.display=undefined}}
function _processPayload(){var p=tommy.current.payload
var keywords=p.split(" ")
keywords=_removeArticlesAndTrivialWords(keywords)
var scores={}
for(var i=0;i<keywords.length;i++){var keyword=keywords[i].toLowerCase()
var possible=tommy.internalDefinitionMapping[keyword]||[]
for(var e=0;e<possible.length;e++){var entry=possible[e]
if(!scores[entry]){scores[entry]=1}else{scores[entry]+=1}}}
if(Object.keys(scores).length==0){_displayNoResults()}else{_displaySuggestions(scores)}}
function _removeArticlesAndTrivialWords(list){var arr=['the','of','for','a','and','to']
return list.filter(e=>!arr.includes(e))}
function _displaySuggestions(indexedScores){tommy.resultPanel.style.visibility="visible"
tommy.resultPanelSuggestions.innerHTML=""
var indices=Object.keys(indexedScores).sort(function(a,b){return indexedScores[a]-indexedScores[b]})
if(tommy.settings.tail.length>0){indices.push(-1)
for(var i=0;i<tommy.settings.tail.length;i++){indices.push(i)}}
tommy.current.suggestions=[]
var nowOnTail=false
console.log(indices)
for(var i=0;i<indices.length;i++){var index=parseInt(indices[i])
if(index<0){nowOnTail=true
continue}
var def=nowOnTail?tommy.settings.tail[index]:tommy.config[index]
tommy.current.suggestions.push(def)
if(def.displayHTML){var suggestionHTML=def.displayHTML()
tommy.resultPanelSuggestions.appendChild(suggestionHTML)}else{var suggestionDiv=document.createElement("div")
suggestionDiv.classList.add("suggestion-item")
var title=document.createElement("p")
title.classList.add("suggestion-title")
var description=document.createElement("p")
description.classList.add("suggestion-description")
if(def.titleFunction){title.innerHTML=def.titleFunction()
suggestionDiv.appendChild(title)}else if(def.title){title.innerHTML=def.title
suggestionDiv.appendChild(title)}
if(def.descriptionFunction){description.innerHTML=def.descriptionFunction()
suggestionDiv.appendChild(description)}else if(def.description){description.innerHTML=def.description
suggestionDiv.appendChild(description)}
suggestionDiv.onclick=_moveToSuggestion.bind(null,def)
tommy.resultPanelSuggestions.appendChild(suggestionDiv)}}
tommy.resultPanel.style.height=_calculateNeededHeight()}
function _displayNoResults(){d("No suggestions could be made; display no results result")
var element=null
if(tommy.settings.emptyHTML){element=tommy.settings.emptyHTML()}else if(tommy.settings.emptyText){var textElement=document.createElement("p")
textElement.id="no-results-text"
textElement.innerHTML=tommy.settings.emptyText
element=textElement}else{var textElement=document.createElement("p")
textElement.id="no-results-text"
textElement.innerHTML="No result found"
element=textElement}
tommy.resultPanel.style.visibility="visible"
tommy.resultPanelSuggestions.innerHTML=""
tommy.resultPanelSuggestions.appendChild(element)
tommy.resultPanel.style.height=_calculateNeededHeight()}
function _calculateNeededHeight(){var height=tommy.resultPanelTop.offsetHeight+tommy.resultPanelSuggestions.offsetHeight+16
return height+"px"}
function _moveToSuggestion(definition){if(definition.clickFunction){definition.clickFunction()}else if(definition.path){window.location.href=definition.path}}
var TommyContainer=document.registerElement('tommy-container',{prototype:Object.create(HTMLElement.prototype)});function d(message){if(tommy.settings.debug)console.log(message)}
function e(message){if(tommy.settings.debug)console.error(message)}
if(typeof define==='function'&&typeof define.amd==='object'&&define.amd){define(function(){return Tommy})}else if(typeof module!=='undefined'&&module.exports){module.exports=Tommy}else{window.Tommy=Tommy}})();